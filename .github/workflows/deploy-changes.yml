name: Deploy on changes

on:
  push:
    branches:
      - development
      - main

jobs:
  ## ###############
  ## 1️⃣ Deploy firebase meta changes
  ## ###############
  deploy-firebase-settings:
    name: Deploy changes to meta
    runs-on: ubuntu-22.04
    steps:
      # Clones repo to the commit that triggered the event
      - name: Cloning repository
        uses: actions/checkout@v3
      - name: Get changed files in meta file changes
        id: changed-firebase-files
        uses: tj-actions/changed-files@v35
        with:
          files: fire{base,store}*
      - name: List all changed files
        run: |
          echo "Any changed: ${{ steps.changed-firebase-files.outputs.any_changed }}, base ref: ${{ github.ref }}"
          for file in ${{ steps.changed-firebase-files.outputs.all_changed_files }}; do
            echo "change: $file"
          done

      # Set up node and install frontend dependencies
      - name: Set up Node.js (.nvmrc)
        uses: actions/setup-node@v3
        if: steps.changed-firebase-files.outputs.any_changed == 'true'
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        if: steps.changed-firebase-files.outputs.any_changed == 'true'
        run: npm ci --loglevel verbose

      #########
      # Deploy
      - name: Set up DEV firebase
        uses: w9jds/setup-firebase@main
        if: |
          github.ref == 'refs/heads/development' &&
          steps.changed-firebase-files.outputs.any_changed == 'true'
        with:
          project_id: development
          gcp_sa_key: ${{ secrets.SERVICE_ACCOUNT_DEVELOPMENT }}

      - name: Set up PROD firebase
        uses: w9jds/setup-firebase@main
        if: |
          github.ref == 'refs/heads/main' &&
          steps.changed-firebase-files.outputs.any_changed == 'true'
        with:
          project_id: production
          gcp_sa_key: ${{ secrets.SERVICE_ACCOUNT_PRODUCTION }}
      - name: Deploy metadata
        if: |
          steps.changed-firebase-files.outputs.any_changed == 'true'
        run: firebase deploy --only=firestore

  ## ###############
  ## 2️⃣ Deploy functions
  ## ###############
  deploy-functions:
    name: Deploy changes to functions
    needs: deploy-firebase-settings
    runs-on: ubuntu-22.04
    steps:
      # Clones repo to the commit that triggered the event
      - name: Cloning repository
        uses: actions/checkout@v3
      - name: Get changed files in functions folder
        id: changed-functions-files
        uses: tj-actions/changed-files@v35
        with:
          files: functions/**
      - name: List all changed files
        run: |
          echo "Any changed: ${{ steps.changed-functions-files.outputs.any_changed }}, base ref: ${{ github.ref }}"
          for file in ${{ steps.changed-functions-files.outputs.all_changed_files }}; do
            echo "change: $file"
          done

      # Set up node and install frontend dependencies
      - name: Set up Node.js (.nvmrc)
        uses: actions/setup-node@v3
        if: steps.changed-functions-files.outputs.any_changed == 'true'
        with:
          node-version-file: "functions/.nvmrc"
          cache-dependency-path: "functions/package-lock.json"
          cache: "npm"
      - name: Install functions dependencies
        if: steps.changed-functions-files.outputs.any_changed == 'true'
        run: npm ci --loglevel verbose
        working-directory: functions

      #####################
      # Set up environment
      - name: Create DEV environment files
        if: |
          github.ref == 'refs/heads/development' &&
          steps.changed-functions-files.outputs.any_changed == 'true'
        working-directory: functions
        run: |
          echo -e "${{ secrets.FUNCTIONS_DOTENV_DEVELOPMENT }}" > .env.development
      - name: Create PROD environment files
        if: |
          github.ref == 'refs/heads/main' &&
          steps.changed-functions-files.outputs.any_changed == 'true'
        working-directory: functions
        run: |
          echo -e "${{ secrets.FUNCTIONS_DOTENV_PRODUCTION }}" > .env.production

      #########
      # Deploy
      - name: Set up DEV firebase
        uses: w9jds/setup-firebase@main
        if: |
          github.ref == 'refs/heads/development' &&
          steps.changed-functions-files.outputs.any_changed == 'true'
        with:
          project_id: development
          gcp_sa_key: ${{ secrets.SERVICE_ACCOUNT_DEVELOPMENT }}

      - name: Set up PROD firebase
        uses: w9jds/setup-firebase@main
        if: |
          github.ref == 'refs/heads/main' &&
          steps.changed-functions-files.outputs.any_changed == 'true'
        with:
          project_id: production
          gcp_sa_key: ${{ secrets.SERVICE_ACCOUNT_PRODUCTION }}
      - name: Deploy functions
        if: |
          steps.changed-functions-files.outputs.any_changed == 'true'
        run: firebase deploy --only functions

  ## ###############
  ## 3️⃣ Deploy frontend changes
  ## ###############
  deploy-frontend:
    name: Deploy frontend changes
    runs-on: ubuntu-22.04
    needs: [deploy-functions, deploy-firebase-settings]

    steps:
      # Clones repo to the commit that triggered the event
      - name: Cloning repository
        uses: actions/checkout@v3
      - name: Get changed files
        id: changed-frontend-files
        uses: tj-actions/changed-files@v35
        with:
          files_ignore: functions/**;fire{base,store}*;.*/**
          files_ignore_separator: ";"
      - name: List all changed files
        run: |
          echo "Any changed: ${{ steps.changed-frontend-files.outputs.any_changed }}, base ref: ${{ github.base_ref }}"
          for file in ${{ steps.changed-frontend-files.outputs.all_changed_files }}; do
            echo "change: $file"
          done

      # Set up node and install frontend dependencies
      - name: Set up Node.js (.nvmrc)
        uses: actions/setup-node@v3
        if: steps.changed-frontend-files.outputs.any_changed == 'true'
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      # Install dependencies with failover
      - name: Install dependencies with cache
        if: steps.changed-frontend-files.outputs.any_changed == 'true'
        id: depinstall
        run: npm ci --loglevel verbose
        continue-on-error: true
      - name: Install dependencies without cache
        if: steps.changed-frontend-files.outputs.any_changed == 'true' && steps.depinstall.outcome == 'failure'
        run: npm install
      - name: Install functions dependencies (needed for emulator)
        if: steps.changed-frontend-files.outputs.any_changed == 'true'
        run: npm ci --loglevel verbose
        working-directory: functions
      - uses: FedericoCarboni/setup-ffmpeg@v3
        id: setup-ffmpeg
      - name: Cache firebase emulators
        uses: actions/cache@v4
        with:
          path: ~/.cache/firebase/emulators
          key: ${{ runner.os }}-firebase-emulators-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-firebase-emulators-
          save-always: true

      # Set up environment
      - name: Create DEV environment files
        if: |
          github.ref == 'refs/heads/development' &&
          steps.changed-frontend-files.outputs.any_changed == 'true'
        run: |
          echo -e "${{ secrets.DOTENV_DEVELOPMENT }}" > .env
          echo -e "${{ secrets.FUNCTIONS_DOTENV_DEVELOPMENT }}" > functions/.env.development

      - name: Create PROD environment files
        if: |
          github.ref == 'refs/heads/main' &&
          steps.changed-frontend-files.outputs.any_changed == 'true'
        run: |
          echo -e "${{ secrets.DOTENV_PRODUCTION }}" > .env
          echo -e "${{ secrets.FUNCTIONS_DOTENV_PRODUCTION }}" > functions/.env.production

      # Set up firebase
      - name: Set up DEV firebase
        uses: w9jds/setup-firebase@main
        if: |
          github.ref == 'refs/heads/development' &&
          steps.changed-frontend-files.outputs.any_changed == 'true'
        with:
          project_id: development
          gcp_sa_key: ${{ secrets.SERVICE_ACCOUNT_DEVELOPMENT }}

      - name: Set up PROD firebase
        uses: w9jds/setup-firebase@main
        if: |
          github.ref == 'refs/heads/main' &&
          steps.changed-frontend-files.outputs.any_changed == 'true'
        with:
          project_id: production
          gcp_sa_key: ${{ secrets.SERVICE_ACCOUNT_PRODUCTION }}

      # Check linting
      - name: Check for linting errors
        if: steps.changed-frontend-files.outputs.any_changed == 'true'
        run: npm run lint

      # Check CI
      - name: Run cypress tests
        if: steps.changed-frontend-files.outputs.any_changed == 'true'
        env:
          WAIT_ON_TIMEOUT: 30000
          START_SERVER_AND_TEST_INSECURE: true
          # DEBUG: start-server-and-test
          CYPRESS_NODE_TLS_REJECT_UNAUTHORIZED: 0
        run: npm run test:ci:with_emulator

      # If CI failed, upload the videos for debugging
      - name: Testing failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: cypress-videos
          path: cypress/videos

      # Upload log files of this fun
      - name: Upload all log files
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Logfiles
          path: |
            *.log
            functions/*.log

      # Prep env for deployment
      - name: Remove debug token and dev settings from build
        if: steps.changed-frontend-files.outputs.any_changed == 'true'
        run: |
          sed -i 's/^REACT_APP_APPCHECK_DEBUG_TOKEN=.*$//g' .env
          sed -i 's/^VITE_APPCHECK_DEBUG_TOKEN=.*$//g' .env
          sed -i 's/^VITE_useEmulator=.*$//g' .env

      # Build frontend files
      - name: Build website files
        if: steps.changed-frontend-files.outputs.any_changed == 'true'
        env:
          NODE_ENV: production
          CI: false
        run: npm run build

      # Deploy frontend
      - name: Deploy frontend
        if: |
          steps.changed-frontend-files.outputs.any_changed == 'true'
        run: firebase deploy --only hosting
